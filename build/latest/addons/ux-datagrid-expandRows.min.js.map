{"version":3,"file":"ux-datagrid-expandRows.min.js","sources":["../../../src/addons/expandRows.js"],"names":["exports","datagrid","events","COLLAPSE_ROW","EXPAND_ROW","TOGGLE_ROW","ROW_TRANSITION_COMPLETE","COLLAPSE_ALL_EXPANDED_ROWS","options","expandRows","autoClose","scrollOnExpand","angular","module","factory","inst","getIndex","itemOrIndex","lastGetIndex","getNormalizedIndex","setup","item","template","templateModel","defaultName","cls","style","swap","Error","cache","setupTemplates","ux","each","getState","index","opened","states","closed","toggle","expand","collapse","opening","setState","omitIndexes","closeAll","silent","cacheItemData","intIndex","parseInt","rowsLength","indexOf","state","elm","tpl","swapTpl","getTemplate","data","name","getExistingRow","scope","$state","transition","addEventListener","TRNEND_EV","onTransitionEnd","reverse","makeReverseStyle","css","setTemplate","getRowElm","addClass","evt","target","chunks","detachDom","setTimeout","params","reverseStyle","value","key","list","event","s","Object","prototype","hasOwnProperty","apply","element","$index","removeEventListener","removeClass","height","offsetHeight","isNaN","safeDigest","updateHeights","clearTimeout","intv","scrollModel","scrollIntoView","dispatch","flow","add","length","getViewportHeight","getContentHeight","scrollToBottom","isExpanded","getTemplateHeight","result","log","superGetTemplateHeight","destroy","logWrapper","dummyStyle","document","createElement","vendor","t","vendors","split","i","l","substr","transitionEnd","webkit","Moz","O","ms","unwatchers","push","$on","ON_READY","ON_ROW_COMPILE","$s","el","classList","ON_BEFORE_TOGGLE_SORT","ON_BEFORE_DATA_CHANGE"],"mappings":"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","sourcesContent":["exports.datagrid.events.COLLAPSE_ROW = \"datagrid:collapseRow\";\nexports.datagrid.events.EXPAND_ROW = \"datagrid:expandRow\";\nexports.datagrid.events.TOGGLE_ROW = \"datagrid:toggleRow\";\nexports.datagrid.events.ROW_TRANSITION_COMPLETE = \"datagrid:rowTransitionComplete\";\nexports.datagrid.events.COLLAPSE_ALL_EXPANDED_ROWS = \"datagrid:collapseAllExpandedRows\";\nexports.datagrid.options.expandRows = [];\nexports.datagrid.options.expandRows.autoClose = true;\nexports.datagrid.options.expandRows.scrollOnExpand = true;\nangular.module('ux').factory('expandRows', function () {\n    //TODO: on change row template. This needs to collapse the row.\n    return ['inst', function (inst) {\n        var intv,\n            result = exports.logWrapper('expandRows', {}, 'green', inst.dispatch),\n            lastGetIndex,\n            cache = {},\n            opened = {},\n            opening = false,\n            states = {\n                opened: \"opened\", closed: \"closed\"\n            },\n            superGetTemplateHeight = inst.templateModel.getTemplateHeight,\n\n        // transition end lookup.\n            dummyStyle = document.createElement('div').style,\n            vendor = (function () {\n                var vendors = 't,webkitT,MozT,msT,OT'.split(','),\n                    t,\n                    i = 0,\n                    l = vendors.length;\n\n                for ( ; i < l; i++ ) {\n                    t = vendors[i] + 'ransform';\n                    if ( t in dummyStyle ) {\n                        return vendors[i].substr(0, vendors[i].length - 1);\n                    }\n                }\n\n                return false;\n            })(),\n            TRNEND_EV = (function () {\n                if ( vendor === false ) return false;\n\n                var transitionEnd = {\n                        ''\t\t\t: 'transitionend',\n                        'webkit'\t: 'webkitTransitionEnd',\n                        'Moz'\t\t: 'transitionend',\n                        'O'\t\t\t: 'oTransitionEnd',\n                        'ms'\t\t: 'MSTransitionEnd'\n                    };\n\n                return transitionEnd[vendor];\n            })();\n\n        dummyStyle = null;\n\n        function getIndex(itemOrIndex) {\n            lastGetIndex = typeof itemOrIndex === \"number\" ? itemOrIndex : inst.getNormalizedIndex(itemOrIndex, lastGetIndex);\n            return lastGetIndex;\n        }\n\n        function setup(item) {\n            item.template = item.template || inst.templateModel.defaultName;\n            if (!item.cls && !item.style && !item.swap) {\n                throw new Error(\"expandRows will not work without an cls|style|swap property\");\n            }\n            cache[item.template] = item;\n        }\n\n        function setupTemplates() {\n            ux.each(inst.options.expandRows, setup);\n        }\n\n        function getState(itemOrIndex) {\n            var index = getIndex(itemOrIndex);\n            return opened[index] ? states.opened : states.closed;\n        }\n\n        function toggle(itemOrIndex) {\n            if (getState(itemOrIndex) === states.closed) {\n                expand(itemOrIndex);\n            } else {\n                collapse(itemOrIndex);\n            }\n        }\n\n        function expand(itemOrIndex) {\n            var index = getIndex(itemOrIndex);\n            if (getState(index) === states.closed) {\n                // prevent multi-finger expand rows.\n                if (inst.options.expandRows.autoClose && opening) {\n                    return;\n                }\n                opening = true;\n                autoClose([index]);\n                setState(index, states.opened);\n            }\n        }\n\n        function collapse(itemOrIndex) {\n            var index = getIndex(itemOrIndex);\n            if (getState(index) === states.opened) {\n                setState(index, states.closed);\n            }\n        }\n\n        function autoClose(omitIndexes) {\n            if (inst.options.expandRows.autoClose) {\n                closeAll(omitIndexes);\n            }\n        }\n\n        function closeAll(omitIndexes, silent) {\n            exports.each(opened, function (cacheItemData, index) {\n                var intIndex = parseInt(index, 10);\n                if (!omitIndexes || (inst.rowsLength > intIndex && omitIndexes.indexOf(intIndex) === -1)) {\n                    if (silent) {\n                        delete opened[index];\n                    } else {\n                        collapse(intIndex);\n                    }\n                }\n            });\n        }\n\n        function setState(index, state) {\n            var template = inst.templateModel.getTemplate(inst.data[index]), elm, tpl, swapTpl;\n            if (cache[template.name]) {\n                elm = inst.getExistingRow(index);\n                if (!elm || !elm.scope()) { // we must be closing a row out of view. possibly destroyed.\n                    delete opened[index];\n                    return;\n                }\n                elm.scope().$state = state;\n                tpl = cache[template.name];\n                if (tpl.transition !== false) {\n                    elm[0].addEventListener(TRNEND_EV, onTransitionEnd);\n                }\n                if (tpl.style) {\n                    if (!tpl.reverse) {\n                        tpl.reverse = makeReverseStyle(elm, tpl.style);\n                    }\n                    elm.css(state === states.opened ? tpl.style : tpl.reverse);\n                }\n                if (tpl.swap && tpl.state !== state) {\n                    swapTpl = cache[tpl.swap];\n                    inst.templateModel.setTemplate(index, tpl.swap, [swapTpl.cls]);\n                    elm = inst.getRowElm(index);\n                } else if (tpl.cls) {\n                    elm[(state === states.opened ? \"addClass\" : \"removeClass\")](tpl.cls);\n                    elm.addClass('animating');\n                }\n                if (tpl.transition === false) {\n                    // we need to wait for the heights to update before updating positions.\n                    var evt = {target: elm[0], index:index, state:state};\n                    if (inst.options.chunks.detachDom) {\n                        setTimeout(function () {\n                            onTransitionEnd(evt);\n                        }, 0);\n                    } else {\n                        onTransitionEnd(evt);\n                    }\n                } else {\n                    opening = false;\n                }\n            } else {\n                throw new Error(\"unable to toggle template. cls for template '\" + template.name + \"' was not set.\");\n            }\n        }\n\n        function makeReverseStyle(elm, style) {\n            var params = {elm: elm, style: style, reverse: {}};\n            ux.each(style, reverseStyle, params);\n            return params.reverse;\n        }\n\n        function reverseStyle(value, key, list, params) {\n            params.reverse[key] = params.elm.css(key);\n        }\n\n        function onTransitionEnd(event) {\n            var elm, s, index, state;\n            if (Object.prototype.hasOwnProperty.apply(event, ['index'])) {\n                elm = inst.getRowElm(event.index);\n                index = event.index;\n                state = event.state;\n            } else {\n                elm = angular.element(event.target);\n            }\n            s = elm.scope();\n            if (state && s) {\n                s.$index = index;\n                s.$state = state;\n            } else if (s) {\n                index = s.$index;\n                state = s.$state;\n            }\n            elm[0].removeEventListener(TRNEND_EV, onTransitionEnd);\n            elm.removeClass('animating');\n            if (state === states.opened) {\n                opened[index] = {\n                    index: index,\n                    height: parseInt(elm[0].offsetHeight || 0, 10)\n                };\n                if (isNaN(opened[index].height)) {\n                    throw new Error(\"Invalid Height\");\n                }\n            } else {\n                delete opened[index];\n            }\n            if (s) {\n                inst.safeDigest(s);\n            }\n            inst.updateHeights(index);\n            // we told the heights to update. Give time for them to change then fire the event.\n            clearTimeout(intv);\n            intv = setTimeout(function () {\n                clearTimeout(intv);\n                if (inst.options.expandRows.scrollOnExpand) {\n                    inst.scrollModel.scrollIntoView(index, true);\n                }\n                inst.dispatch(exports.datagrid.events.ROW_TRANSITION_COMPLETE);\n                opening = false;\n\n                if (inst.options.expandRows.scrollOnExpand) {\n                    inst.flow.add(function() {\n                        // check for last row. On expansion it needs to scroll down.\n                        if (state === states.opened && index === inst.data.length - 1 && inst.getViewportHeight() < inst.getContentHeight()) {\n                            inst.scrollModel.scrollToBottom(true);\n                        }\n                    }, [], 0);\n                }\n            }, 0);\n        }\n\n        function isExpanded(itemOrIndex) {\n            var index = getIndex(itemOrIndex);\n            return !!opened[index];\n        }\n\n        function getTemplateHeight(item) {\n            var index = getIndex(item);\n            if (opened[index]) {\n                result.log(\"\\texpandRow %s to height %s\", index, opened[index].height);\n                return opened[index].height;\n            }\n            return superGetTemplateHeight(item);\n        }\n\n        function destroy() {\n            result = null;\n            cache = null;\n            opened = null;\n            states = null;\n        }\n\n        // override the getTemplateHeight to return the result with the expanded height.\n        inst.templateModel.getTemplateHeight = getTemplateHeight;\n\n        result.states = states;\n        result.getIndex = getIndex;\n        result.toggle = toggle;\n        result.expand = expand;\n        result.collapse = collapse;\n        result.isExpanded = isExpanded;\n        result.destroy = destroy;\n\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.ON_READY, setupTemplates));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.EXPAND_ROW, function (event, itemOrIndex) {\n            result.expand(itemOrIndex);\n        }));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.COLLAPSE_ROW, function (event, itemOrIndex) {\n            result.collapse(itemOrIndex);\n        }));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.TOGGLE_ROW, function (event, itemOrIndex) {\n            result.toggle(itemOrIndex);\n        }));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.ON_ROW_COMPILE, function (event, $s, el) {\n            if (opened[$s.$index]) {\n                var template = inst.templateModel.getTemplate(inst.data[$s.$index]),\n                    tpl = cache[template.name];\n                el[0].classList.add(tpl.cls);\n            }\n        }));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.COLLAPSE_ALL_EXPANDED_ROWS, function (event, silent) {\n            closeAll(null, silent);\n        }));\n\n        if (exports.datagrid.events.ON_BEFORE_TOGGLE_SORT) {\n            inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.ON_BEFORE_TOGGLE_SORT, function (event) {\n                closeAll();\n            }));\n        }\n\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.ON_BEFORE_DATA_CHANGE, function (event) {\n            closeAll(null, true);\n        }));\n\n        inst.expandRows = result;\n\n        return inst;\n    }];\n});"]}